# -*- coding: utf-8 -*-
"""flowers

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EgswF1It_S3Cow7ODtZY1oT90et6PyB4
"""

from google.colab import drive
drive.mount('/content/drive')

from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt

train_dir="/content/drive/MyDrive/Ai/flowers"
img_width, img_height = 128, 128
batch_size=32
train_datagen = ImageDataGenerator(
rescale=1.0/255,
rotation_range=30,
width_shift_range=0.2,
height_shift_range=0.2,
shear_range=0.2,
zoom_range=0.2,
horizontal_flip=True,
fill_mode="nearest"
)

train_generator = train_datagen.flow_from_directory(
train_dir,
target_size=(img_width, img_height),
batch_size=batch_size,
class_mode="categorical"
)
model = Sequential([
    Conv2D(32, (3, 3), activation="relu", input_shape=(img_width, img_height, 3)),
    MaxPooling2D(2, 2),
    Conv2D(64, (3, 3), activation="relu"),
    MaxPooling2D(2, 2),
    Conv2D(128, (3, 3), activation="relu"),
    MaxPooling2D(2, 2),
    Flatten(),
    Dense(512, activation="relu"),
    Dropout(0.5),
    Dense(5, activation="softmax")
])

model.compile(optimizer="adam", loss="categorical_crossentropy", metrics=["accuracy"])
model.summary()
epochs = 200
history = model.fit(train_generator, epochs=epochs)
plt.plot(history.history["accuracy"], label="Kết quả huấn luyện")

plt.ylabel("Độ chính xác")
plt.xlabel("Số lần học")
plt.legend()
plt.show()

from tensorflow.keras.utils import load_img
import numpy as np
import matplotlib.pyplot as plt

path = "/content/cúc.jpg"
img = load_img(path, target_size=(128, 128))
plt.imshow(img)
plt.show()
img = np.array(img)
img = img / 255.0
img = img.reshape(1, 128, 128, 3)
prediction = np.argmax(model.predict(img))
class_label = {v: k for k, v in train_generator.class_indices.items()}
denomination = class_label[prediction]
print(f"Kết quả dự đoán:  {denomination}")

path = "/content/hướng dương.jpg"
img = load_img(path, target_size=(128, 128))
plt.imshow(img)
plt.show()
img = np.array(img)
img = img / 255.0
img = img.reshape(1, 128, 128, 3)
prediction = np.argmax(model.predict(img))
class_label = {v: k for k, v in train_generator.class_indices.items()}
denomination = class_label[prediction]
print(f"Kết quả dự đoán:  {denomination}")

path = "/content/hoa hồng.jpg"
img = load_img(path, target_size=(128, 128))
plt.imshow(img)
plt.show()
img = np.array(img)
img = img / 255.0
img = img.reshape(1, 128, 128, 3)
prediction = np.argmax(model.predict(img))
class_label = {v: k for k, v in train_generator.class_indices.items()}
denomination = class_label[prediction]
print(f"Kết quả dự đoán:  {denomination}")

path = "/content/tu.jpg"
img = load_img(path, target_size=(128, 128))
plt.imshow(img)
plt.show()
img = np.array(img)
img = img / 255.0
img = img.reshape(1, 128, 128, 3)
prediction = np.argmax(model.predict(img))
class_label = {v: k for k, v in train_generator.class_indices.items()}
denomination = class_label[prediction]
print(f"Kết quả dự đoán:  {denomination}")

path = "/content/công anh.jpg"
img = load_img(path, target_size=(128, 128))
plt.imshow(img)
plt.show()
img = np.array(img)
img = img / 255.0
img = img.reshape(1, 128, 128, 3)
prediction = np.argmax(model.predict(img))
class_label = {v: k for k, v in train_generator.class_indices.items()}
denomination = class_label[prediction]
print(f"Kết quả dự đoán:  {denomination}")